// Generated by Dagger (https://dagger.dev).
package com.example.mvvmdagger;

import androidx.lifecycle.ViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPlayerComponent implements PlayerComponent {
  private Provider<PlayerRepository> playerRepositoryProvider;

  private Provider<PlayerViewModel> playerViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerPlayerComponent() {

    initialize();
  }

  public static Builder builder() {
    return new Builder();
  }

  public static PlayerComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.playerRepositoryProvider = PlayerRepository_Factory.create(ViewModelModule_PlayerFactory.create());
    this.playerViewModelProvider = PlayerViewModel_Factory.create(playerRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(PlayerViewModel.class, (Provider) playerViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private Builder() {
    }

    public PlayerComponent build() {
      return new DaggerPlayerComponent();
    }
  }
}
